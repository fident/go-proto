// Code generated by protoc-gen-go.
// source: fident.proto
// DO NOT EDIT!

/*
Package fident is a generated protocol buffer package.

It is generated from these files:
	fident.proto

It has these top-level messages:
	ServiceRegistrationResult
	ServiceRegistrationPayload
	AuthResult
	AuthChallengeResult
	AuthChallengePayload
	PerformAuthPayload
	AuthKeyRequestPayload
	AuthKeyResult
*/
package fident

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ServiceRegistrationResult struct {
	IdentityId string `protobuf:"bytes,1,opt,name=identity_id,json=identityId" json:"identity_id,omitempty"`
	ServiceKey string `protobuf:"bytes,2,opt,name=service_key,json=serviceKey" json:"service_key,omitempty"`
	KeyHandle  string `protobuf:"bytes,3,opt,name=key_handle,json=keyHandle" json:"key_handle,omitempty"`
}

func (m *ServiceRegistrationResult) Reset()                    { *m = ServiceRegistrationResult{} }
func (m *ServiceRegistrationResult) String() string            { return proto.CompactTextString(m) }
func (*ServiceRegistrationResult) ProtoMessage()               {}
func (*ServiceRegistrationResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ServiceRegistrationPayload struct {
	ServiceName   string `protobuf:"bytes,1,opt,name=service_name,json=serviceName" json:"service_name,omitempty"`
	ServiceVendor string `protobuf:"bytes,2,opt,name=service_vendor,json=serviceVendor" json:"service_vendor,omitempty"`
	SupportEmail  string `protobuf:"bytes,3,opt,name=support_email,json=supportEmail" json:"support_email,omitempty"`
}

func (m *ServiceRegistrationPayload) Reset()                    { *m = ServiceRegistrationPayload{} }
func (m *ServiceRegistrationPayload) String() string            { return proto.CompactTextString(m) }
func (*ServiceRegistrationPayload) ProtoMessage()               {}
func (*ServiceRegistrationPayload) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type AuthResult struct {
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *AuthResult) Reset()                    { *m = AuthResult{} }
func (m *AuthResult) String() string            { return proto.CompactTextString(m) }
func (*AuthResult) ProtoMessage()               {}
func (*AuthResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type AuthChallengeResult struct {
	Challenge string `protobuf:"bytes,1,opt,name=challenge" json:"challenge,omitempty"`
}

func (m *AuthChallengeResult) Reset()                    { *m = AuthChallengeResult{} }
func (m *AuthChallengeResult) String() string            { return proto.CompactTextString(m) }
func (*AuthChallengeResult) ProtoMessage()               {}
func (*AuthChallengeResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type AuthChallengePayload struct {
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
}

func (m *AuthChallengePayload) Reset()                    { *m = AuthChallengePayload{} }
func (m *AuthChallengePayload) String() string            { return proto.CompactTextString(m) }
func (*AuthChallengePayload) ProtoMessage()               {}
func (*AuthChallengePayload) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type PerformAuthPayload struct {
	Username          string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	KeyHandle         string `protobuf:"bytes,2,opt,name=key_handle,json=keyHandle" json:"key_handle,omitempty"`
	ChallengeResponse string `protobuf:"bytes,3,opt,name=challenge_response,json=challengeResponse" json:"challenge_response,omitempty"`
}

func (m *PerformAuthPayload) Reset()                    { *m = PerformAuthPayload{} }
func (m *PerformAuthPayload) String() string            { return proto.CompactTextString(m) }
func (*PerformAuthPayload) ProtoMessage()               {}
func (*PerformAuthPayload) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type AuthKeyRequestPayload struct {
	Username         string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Password         string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
	UsageDescription string `protobuf:"bytes,3,opt,name=usage_description,json=usageDescription" json:"usage_description,omitempty"`
}

func (m *AuthKeyRequestPayload) Reset()                    { *m = AuthKeyRequestPayload{} }
func (m *AuthKeyRequestPayload) String() string            { return proto.CompactTextString(m) }
func (*AuthKeyRequestPayload) ProtoMessage()               {}
func (*AuthKeyRequestPayload) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type AuthKeyResult struct {
	Username   string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	IdentityId string `protobuf:"bytes,2,opt,name=identity_id,json=identityId" json:"identity_id,omitempty"`
	PrivateKey string `protobuf:"bytes,3,opt,name=private_key,json=privateKey" json:"private_key,omitempty"`
	KeyHandle  string `protobuf:"bytes,4,opt,name=key_handle,json=keyHandle" json:"key_handle,omitempty"`
}

func (m *AuthKeyResult) Reset()                    { *m = AuthKeyResult{} }
func (m *AuthKeyResult) String() string            { return proto.CompactTextString(m) }
func (*AuthKeyResult) ProtoMessage()               {}
func (*AuthKeyResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func init() {
	proto.RegisterType((*ServiceRegistrationResult)(nil), "fident.ServiceRegistrationResult")
	proto.RegisterType((*ServiceRegistrationPayload)(nil), "fident.ServiceRegistrationPayload")
	proto.RegisterType((*AuthResult)(nil), "fident.AuthResult")
	proto.RegisterType((*AuthChallengeResult)(nil), "fident.AuthChallengeResult")
	proto.RegisterType((*AuthChallengePayload)(nil), "fident.AuthChallengePayload")
	proto.RegisterType((*PerformAuthPayload)(nil), "fident.PerformAuthPayload")
	proto.RegisterType((*AuthKeyRequestPayload)(nil), "fident.AuthKeyRequestPayload")
	proto.RegisterType((*AuthKeyResult)(nil), "fident.AuthKeyResult")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Auth service

type AuthClient interface {
	CreateServiceAccount(ctx context.Context, in *ServiceRegistrationPayload, opts ...grpc.CallOption) (*ServiceRegistrationResult, error)
	GetAuthenticationChallenge(ctx context.Context, in *AuthChallengePayload, opts ...grpc.CallOption) (*AuthChallengeResult, error)
	GetNewAuthenticationKey(ctx context.Context, in *AuthKeyRequestPayload, opts ...grpc.CallOption) (*AuthKeyResult, error)
	PerformAuthentication(ctx context.Context, in *PerformAuthPayload, opts ...grpc.CallOption) (*AuthResult, error)
}

type authClient struct {
	cc *grpc.ClientConn
}

func NewAuthClient(cc *grpc.ClientConn) AuthClient {
	return &authClient{cc}
}

func (c *authClient) CreateServiceAccount(ctx context.Context, in *ServiceRegistrationPayload, opts ...grpc.CallOption) (*ServiceRegistrationResult, error) {
	out := new(ServiceRegistrationResult)
	err := grpc.Invoke(ctx, "/fident.Auth/CreateServiceAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) GetAuthenticationChallenge(ctx context.Context, in *AuthChallengePayload, opts ...grpc.CallOption) (*AuthChallengeResult, error) {
	out := new(AuthChallengeResult)
	err := grpc.Invoke(ctx, "/fident.Auth/GetAuthenticationChallenge", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) GetNewAuthenticationKey(ctx context.Context, in *AuthKeyRequestPayload, opts ...grpc.CallOption) (*AuthKeyResult, error) {
	out := new(AuthKeyResult)
	err := grpc.Invoke(ctx, "/fident.Auth/GetNewAuthenticationKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) PerformAuthentication(ctx context.Context, in *PerformAuthPayload, opts ...grpc.CallOption) (*AuthResult, error) {
	out := new(AuthResult)
	err := grpc.Invoke(ctx, "/fident.Auth/PerformAuthentication", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Auth service

type AuthServer interface {
	CreateServiceAccount(context.Context, *ServiceRegistrationPayload) (*ServiceRegistrationResult, error)
	GetAuthenticationChallenge(context.Context, *AuthChallengePayload) (*AuthChallengeResult, error)
	GetNewAuthenticationKey(context.Context, *AuthKeyRequestPayload) (*AuthKeyResult, error)
	PerformAuthentication(context.Context, *PerformAuthPayload) (*AuthResult, error)
}

func RegisterAuthServer(s *grpc.Server, srv AuthServer) {
	s.RegisterService(&_Auth_serviceDesc, srv)
}

func _Auth_CreateServiceAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceRegistrationPayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).CreateServiceAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fident.Auth/CreateServiceAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).CreateServiceAccount(ctx, req.(*ServiceRegistrationPayload))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_GetAuthenticationChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthChallengePayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).GetAuthenticationChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fident.Auth/GetAuthenticationChallenge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).GetAuthenticationChallenge(ctx, req.(*AuthChallengePayload))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_GetNewAuthenticationKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthKeyRequestPayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).GetNewAuthenticationKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fident.Auth/GetNewAuthenticationKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).GetNewAuthenticationKey(ctx, req.(*AuthKeyRequestPayload))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_PerformAuthentication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PerformAuthPayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).PerformAuthentication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fident.Auth/PerformAuthentication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).PerformAuthentication(ctx, req.(*PerformAuthPayload))
	}
	return interceptor(ctx, in, info, handler)
}

var _Auth_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fident.Auth",
	HandlerType: (*AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateServiceAccount",
			Handler:    _Auth_CreateServiceAccount_Handler,
		},
		{
			MethodName: "GetAuthenticationChallenge",
			Handler:    _Auth_GetAuthenticationChallenge_Handler,
		},
		{
			MethodName: "GetNewAuthenticationKey",
			Handler:    _Auth_GetNewAuthenticationKey_Handler,
		},
		{
			MethodName: "PerformAuthentication",
			Handler:    _Auth_PerformAuthentication_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("fident.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 503 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x54, 0xe1, 0x6e, 0xd3, 0x3c,
	0x14, 0xfd, 0xda, 0x6f, 0x4c, 0xf4, 0xd2, 0x22, 0x66, 0x5a, 0x51, 0xc2, 0x10, 0xcc, 0x08, 0x09,
	0x09, 0xb1, 0x1f, 0xdb, 0x13, 0x4c, 0x03, 0xc1, 0x84, 0x34, 0x8d, 0x22, 0x21, 0xf1, 0x2b, 0x32,
	0xc9, 0xdd, 0x6a, 0x2d, 0xb5, 0x83, 0xed, 0x74, 0xaa, 0x84, 0x78, 0x01, 0x78, 0x48, 0x1e, 0x05,
	0xdb, 0xb1, 0xd3, 0xac, 0x2d, 0xd3, 0x7e, 0xfa, 0xdc, 0x7b, 0xcf, 0x39, 0xd7, 0x3e, 0x09, 0xf4,
	0xcf, 0x79, 0x8e, 0xc2, 0xec, 0x97, 0x4a, 0x1a, 0x49, 0xb6, 0xeb, 0x13, 0xfd, 0x01, 0x8f, 0x3f,
	0xa3, 0x9a, 0xf3, 0x0c, 0x27, 0x78, 0xc1, 0xb5, 0x51, 0xcc, 0x70, 0x29, 0x26, 0xa8, 0xab, 0xc2,
	0x90, 0x67, 0x70, 0xcf, 0x77, 0x71, 0xb3, 0x48, 0x79, 0x3e, 0xee, 0x3c, 0xef, 0xbc, 0xea, 0x4d,
	0x20, 0x42, 0x27, 0xb9, 0x6b, 0xd0, 0xf5, 0x74, 0x7a, 0x89, 0x8b, 0x71, 0xb7, 0x6e, 0x08, 0xd0,
	0x47, 0x5c, 0x90, 0xa7, 0x00, 0xb6, 0x90, 0x4e, 0x99, 0xc8, 0x0b, 0x1c, 0xff, 0xef, 0xeb, 0x3d,
	0x8b, 0x7c, 0xf0, 0x00, 0xfd, 0xd5, 0x81, 0x64, 0x83, 0xfc, 0x19, 0x5b, 0x14, 0x92, 0xe5, 0x64,
	0x0f, 0xfa, 0x91, 0x5e, 0xb0, 0x19, 0x06, 0x03, 0x51, 0xf2, 0xd4, 0x42, 0xe4, 0x25, 0xdc, 0x8f,
	0x2d, 0x73, 0x14, 0xb9, 0x54, 0xc1, 0xc4, 0x20, 0xa0, 0x5f, 0x3c, 0x48, 0x5e, 0xc0, 0x40, 0x57,
	0x65, 0x29, 0x95, 0x49, 0x71, 0xc6, 0x78, 0x11, 0xac, 0xf4, 0x03, 0xf8, 0xce, 0x61, 0x94, 0x02,
	0x1c, 0x55, 0x66, 0x1a, 0x96, 0x1f, 0xc2, 0x1d, 0x23, 0x2f, 0x51, 0x04, 0xd5, 0xfa, 0x40, 0x0f,
	0xe1, 0xa1, 0xeb, 0x39, 0x9e, 0xb2, 0xa2, 0x40, 0x71, 0x81, 0xa1, 0x79, 0x17, 0x7a, 0x59, 0x84,
	0xc2, 0xc0, 0x12, 0xa0, 0x07, 0x30, 0xbc, 0x36, 0x14, 0xf7, 0x4b, 0xe0, 0x6e, 0x65, 0x7d, 0xb6,
	0x76, 0x6b, 0xce, 0xf4, 0x27, 0x90, 0x33, 0x54, 0xe7, 0x52, 0xcd, 0xdc, 0xe8, 0x2d, 0x26, 0x56,
	0xee, 0xba, 0xbb, 0x72, 0xd7, 0xe4, 0x0d, 0x90, 0xc6, 0x51, 0xaa, 0x50, 0x97, 0x52, 0xe8, 0xf8,
	0x24, 0x3b, 0x59, 0x6b, 0x1f, 0x5f, 0xb0, 0xc1, 0x18, 0x39, 0x61, 0xfb, 0x88, 0x13, 0xfc, 0x5e,
	0xa1, 0x36, 0xb7, 0xb1, 0x60, 0x6b, 0x25, 0xd3, 0xfa, 0x4a, 0xaa, 0x3c, 0x18, 0x68, 0xce, 0xe4,
	0x35, 0xec, 0x54, 0x9a, 0x59, 0xed, 0x1c, 0x75, 0xa6, 0x78, 0xe9, 0x1e, 0x3a, 0xc8, 0x3f, 0xf0,
	0x85, 0xb7, 0x4b, 0x9c, 0xfe, 0xee, 0xc0, 0xa0, 0x91, 0xf7, 0x37, 0x7c, 0x93, 0xec, 0x4a, 0x4e,
	0xbb, 0x9b, 0x72, 0x5a, 0x2a, 0x3e, 0x67, 0xa6, 0xce, 0x69, 0xad, 0x0a, 0x01, 0x5a, 0xcf, 0xe9,
	0xd6, 0xca, 0xdd, 0x1d, 0xfc, 0xe9, 0xc2, 0x96, 0xb3, 0x43, 0x52, 0x18, 0x1e, 0x2b, 0xb4, 0x43,
	0x21, 0xb5, 0x47, 0x59, 0x26, 0x2b, 0x61, 0x08, 0xdd, 0x0f, 0x5f, 0xd7, 0xbf, 0xd3, 0x9c, 0xec,
	0xdd, 0xd0, 0x53, 0x2f, 0x49, 0xff, 0x23, 0x5f, 0x21, 0x79, 0x8f, 0xc6, 0x69, 0x39, 0xf3, 0x99,
	0x2f, 0x36, 0xb9, 0x21, 0xbb, 0x91, 0x62, 0x53, 0x9c, 0x92, 0x27, 0x1b, 0xab, 0x0d, 0xf5, 0x27,
	0x78, 0x64, 0xa9, 0x4f, 0xf1, 0xea, 0x3a, 0xbb, 0x5f, 0xbf, 0x3d, 0xb9, 0xf6, 0xe4, 0xc9, 0x68,
	0xad, 0x1c, 0x28, 0x4f, 0x60, 0xd4, 0x0a, 0xe9, 0x92, 0x93, 0x24, 0x71, 0x62, 0x3d, 0xc3, 0x09,
	0x69, 0xb3, 0x45, 0xaa, 0x6f, 0xdb, 0xfe, 0xbf, 0x74, 0xf8, 0x37, 0x00, 0x00, 0xff, 0xff, 0x16,
	0xa8, 0x7b, 0xbe, 0xa7, 0x04, 0x00, 0x00,
}
