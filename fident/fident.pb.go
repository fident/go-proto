// Code generated by protoc-gen-go.
// source: fident.proto
// DO NOT EDIT!

/*
Package fident is a generated protocol buffer package.

It is generated from these files:
	fident.proto

It has these top-level messages:
	ServiceRegistrationResponse
	ServiceRegistrationRequest
	AuthResponse
	AuthChallengeResponse
	AuthChallengeRequest
	PerformAuthRequest
	AuthKeyRequest
	AuthKeyResponse
	LoginTimestampResponse
	LoginTimestampRequest
	IdentityIDsResponse
	IdentityIDsRequest
	AccountAttribute
	AccountDetail
	AccountDetailResponse
	AccountDetailRequest
	GetManagementPermissionsRequest
	ManagementPermissionResponse
	ManagementPermissionsResponse
	AddManagementPermissionReponse
	AddManagementPermissionRequest
	RemoveManagementPermissionReponse
	RemoveManagementPermissionRequest
	Cookie
	CreateUserAccountRequest
	CreateUserAccountResponse
*/
package fident

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ServiceRegistrationResponse struct {
	IdentityId string `protobuf:"bytes,1,opt,name=identity_id,json=identityId" json:"identity_id,omitempty"`
	ServiceKey string `protobuf:"bytes,2,opt,name=service_key,json=serviceKey" json:"service_key,omitempty"`
}

func (m *ServiceRegistrationResponse) Reset()                    { *m = ServiceRegistrationResponse{} }
func (m *ServiceRegistrationResponse) String() string            { return proto.CompactTextString(m) }
func (*ServiceRegistrationResponse) ProtoMessage()               {}
func (*ServiceRegistrationResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ServiceRegistrationResponse) GetIdentityId() string {
	if m != nil {
		return m.IdentityId
	}
	return ""
}

func (m *ServiceRegistrationResponse) GetServiceKey() string {
	if m != nil {
		return m.ServiceKey
	}
	return ""
}

type ServiceRegistrationRequest struct {
	ServiceName   string `protobuf:"bytes,1,opt,name=service_name,json=serviceName" json:"service_name,omitempty"`
	ServiceVendor string `protobuf:"bytes,2,opt,name=service_vendor,json=serviceVendor" json:"service_vendor,omitempty"`
	SupportEmail  string `protobuf:"bytes,3,opt,name=support_email,json=supportEmail" json:"support_email,omitempty"`
}

func (m *ServiceRegistrationRequest) Reset()                    { *m = ServiceRegistrationRequest{} }
func (m *ServiceRegistrationRequest) String() string            { return proto.CompactTextString(m) }
func (*ServiceRegistrationRequest) ProtoMessage()               {}
func (*ServiceRegistrationRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ServiceRegistrationRequest) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *ServiceRegistrationRequest) GetServiceVendor() string {
	if m != nil {
		return m.ServiceVendor
	}
	return ""
}

func (m *ServiceRegistrationRequest) GetSupportEmail() string {
	if m != nil {
		return m.SupportEmail
	}
	return ""
}

type AuthResponse struct {
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *AuthResponse) Reset()                    { *m = AuthResponse{} }
func (m *AuthResponse) String() string            { return proto.CompactTextString(m) }
func (*AuthResponse) ProtoMessage()               {}
func (*AuthResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AuthResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type AuthChallengeResponse struct {
	Challenge string `protobuf:"bytes,1,opt,name=challenge" json:"challenge,omitempty"`
}

func (m *AuthChallengeResponse) Reset()                    { *m = AuthChallengeResponse{} }
func (m *AuthChallengeResponse) String() string            { return proto.CompactTextString(m) }
func (*AuthChallengeResponse) ProtoMessage()               {}
func (*AuthChallengeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AuthChallengeResponse) GetChallenge() string {
	if m != nil {
		return m.Challenge
	}
	return ""
}

type AuthChallengeRequest struct {
	IdentityId string `protobuf:"bytes,1,opt,name=identity_id,json=identityId" json:"identity_id,omitempty"`
	ProjectId  string `protobuf:"bytes,2,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
}

func (m *AuthChallengeRequest) Reset()                    { *m = AuthChallengeRequest{} }
func (m *AuthChallengeRequest) String() string            { return proto.CompactTextString(m) }
func (*AuthChallengeRequest) ProtoMessage()               {}
func (*AuthChallengeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *AuthChallengeRequest) GetIdentityId() string {
	if m != nil {
		return m.IdentityId
	}
	return ""
}

func (m *AuthChallengeRequest) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

type PerformAuthRequest struct {
	IdentityId        string `protobuf:"bytes,1,opt,name=identity_id,json=identityId" json:"identity_id,omitempty"`
	KeyHandle         string `protobuf:"bytes,2,opt,name=key_handle,json=keyHandle" json:"key_handle,omitempty"`
	ProjectId         string `protobuf:"bytes,3,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	ChallengeResponse string `protobuf:"bytes,4,opt,name=challenge_response,json=challengeResponse" json:"challenge_response,omitempty"`
}

func (m *PerformAuthRequest) Reset()                    { *m = PerformAuthRequest{} }
func (m *PerformAuthRequest) String() string            { return proto.CompactTextString(m) }
func (*PerformAuthRequest) ProtoMessage()               {}
func (*PerformAuthRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *PerformAuthRequest) GetIdentityId() string {
	if m != nil {
		return m.IdentityId
	}
	return ""
}

func (m *PerformAuthRequest) GetKeyHandle() string {
	if m != nil {
		return m.KeyHandle
	}
	return ""
}

func (m *PerformAuthRequest) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *PerformAuthRequest) GetChallengeResponse() string {
	if m != nil {
		return m.ChallengeResponse
	}
	return ""
}

type AuthKeyRequest struct {
	Username         string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Password         string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
	UsageDescription string `protobuf:"bytes,3,opt,name=usage_description,json=usageDescription" json:"usage_description,omitempty"`
}

func (m *AuthKeyRequest) Reset()                    { *m = AuthKeyRequest{} }
func (m *AuthKeyRequest) String() string            { return proto.CompactTextString(m) }
func (*AuthKeyRequest) ProtoMessage()               {}
func (*AuthKeyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *AuthKeyRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *AuthKeyRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *AuthKeyRequest) GetUsageDescription() string {
	if m != nil {
		return m.UsageDescription
	}
	return ""
}

type AuthKeyResponse struct {
	Username   string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	IdentityId string `protobuf:"bytes,2,opt,name=identity_id,json=identityId" json:"identity_id,omitempty"`
	PrivateKey string `protobuf:"bytes,3,opt,name=private_key,json=privateKey" json:"private_key,omitempty"`
	KeyHandle  string `protobuf:"bytes,4,opt,name=key_handle,json=keyHandle" json:"key_handle,omitempty"`
}

func (m *AuthKeyResponse) Reset()                    { *m = AuthKeyResponse{} }
func (m *AuthKeyResponse) String() string            { return proto.CompactTextString(m) }
func (*AuthKeyResponse) ProtoMessage()               {}
func (*AuthKeyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *AuthKeyResponse) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *AuthKeyResponse) GetIdentityId() string {
	if m != nil {
		return m.IdentityId
	}
	return ""
}

func (m *AuthKeyResponse) GetPrivateKey() string {
	if m != nil {
		return m.PrivateKey
	}
	return ""
}

func (m *AuthKeyResponse) GetKeyHandle() string {
	if m != nil {
		return m.KeyHandle
	}
	return ""
}

type LoginTimestampResponse struct {
	Results map[string]int64 `protobuf:"bytes,1,rep,name=results" json:"results,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
}

func (m *LoginTimestampResponse) Reset()                    { *m = LoginTimestampResponse{} }
func (m *LoginTimestampResponse) String() string            { return proto.CompactTextString(m) }
func (*LoginTimestampResponse) ProtoMessage()               {}
func (*LoginTimestampResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *LoginTimestampResponse) GetResults() map[string]int64 {
	if m != nil {
		return m.Results
	}
	return nil
}

type LoginTimestampRequest struct {
	IdentityId []string `protobuf:"bytes,1,rep,name=identity_id,json=identityId" json:"identity_id,omitempty"`
}

func (m *LoginTimestampRequest) Reset()                    { *m = LoginTimestampRequest{} }
func (m *LoginTimestampRequest) String() string            { return proto.CompactTextString(m) }
func (*LoginTimestampRequest) ProtoMessage()               {}
func (*LoginTimestampRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *LoginTimestampRequest) GetIdentityId() []string {
	if m != nil {
		return m.IdentityId
	}
	return nil
}

type IdentityIDsResponse struct {
	IdentityId []string `protobuf:"bytes,1,rep,name=identity_id,json=identityId" json:"identity_id,omitempty"`
}

func (m *IdentityIDsResponse) Reset()                    { *m = IdentityIDsResponse{} }
func (m *IdentityIDsResponse) String() string            { return proto.CompactTextString(m) }
func (*IdentityIDsResponse) ProtoMessage()               {}
func (*IdentityIDsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *IdentityIDsResponse) GetIdentityId() []string {
	if m != nil {
		return m.IdentityId
	}
	return nil
}

type IdentityIDsRequest struct {
}

func (m *IdentityIDsRequest) Reset()                    { *m = IdentityIDsRequest{} }
func (m *IdentityIDsRequest) String() string            { return proto.CompactTextString(m) }
func (*IdentityIDsRequest) ProtoMessage()               {}
func (*IdentityIDsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type AccountAttribute struct {
	Key   string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *AccountAttribute) Reset()                    { *m = AccountAttribute{} }
func (m *AccountAttribute) String() string            { return proto.CompactTextString(m) }
func (*AccountAttribute) ProtoMessage()               {}
func (*AccountAttribute) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *AccountAttribute) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *AccountAttribute) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type AccountDetail struct {
	IdentityId string              `protobuf:"bytes,1,opt,name=identity_id,json=identityId" json:"identity_id,omitempty"`
	Username   string              `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	Attributes []*AccountAttribute `protobuf:"bytes,3,rep,name=attributes" json:"attributes,omitempty"`
	Created    int64               `protobuf:"varint,4,opt,name=created" json:"created,omitempty"`
}

func (m *AccountDetail) Reset()                    { *m = AccountDetail{} }
func (m *AccountDetail) String() string            { return proto.CompactTextString(m) }
func (*AccountDetail) ProtoMessage()               {}
func (*AccountDetail) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *AccountDetail) GetIdentityId() string {
	if m != nil {
		return m.IdentityId
	}
	return ""
}

func (m *AccountDetail) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *AccountDetail) GetAttributes() []*AccountAttribute {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *AccountDetail) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

type AccountDetailResponse struct {
	Results []*AccountDetail `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
}

func (m *AccountDetailResponse) Reset()                    { *m = AccountDetailResponse{} }
func (m *AccountDetailResponse) String() string            { return proto.CompactTextString(m) }
func (*AccountDetailResponse) ProtoMessage()               {}
func (*AccountDetailResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *AccountDetailResponse) GetResults() []*AccountDetail {
	if m != nil {
		return m.Results
	}
	return nil
}

type AccountDetailRequest struct {
	IdentityId []string `protobuf:"bytes,1,rep,name=identity_id,json=identityId" json:"identity_id,omitempty"`
}

func (m *AccountDetailRequest) Reset()                    { *m = AccountDetailRequest{} }
func (m *AccountDetailRequest) String() string            { return proto.CompactTextString(m) }
func (*AccountDetailRequest) ProtoMessage()               {}
func (*AccountDetailRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *AccountDetailRequest) GetIdentityId() []string {
	if m != nil {
		return m.IdentityId
	}
	return nil
}

type GetManagementPermissionsRequest struct {
	IdentityId []string `protobuf:"bytes,1,rep,name=identity_id,json=identityId" json:"identity_id,omitempty"`
}

func (m *GetManagementPermissionsRequest) Reset()         { *m = GetManagementPermissionsRequest{} }
func (m *GetManagementPermissionsRequest) String() string { return proto.CompactTextString(m) }
func (*GetManagementPermissionsRequest) ProtoMessage()    {}
func (*GetManagementPermissionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{16}
}

func (m *GetManagementPermissionsRequest) GetIdentityId() []string {
	if m != nil {
		return m.IdentityId
	}
	return nil
}

type ManagementPermissionResponse struct {
	IdentityId  string   `protobuf:"bytes,1,opt,name=identity_id,json=identityId" json:"identity_id,omitempty"`
	Permissions []string `protobuf:"bytes,2,rep,name=permissions" json:"permissions,omitempty"`
}

func (m *ManagementPermissionResponse) Reset()                    { *m = ManagementPermissionResponse{} }
func (m *ManagementPermissionResponse) String() string            { return proto.CompactTextString(m) }
func (*ManagementPermissionResponse) ProtoMessage()               {}
func (*ManagementPermissionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *ManagementPermissionResponse) GetIdentityId() string {
	if m != nil {
		return m.IdentityId
	}
	return ""
}

func (m *ManagementPermissionResponse) GetPermissions() []string {
	if m != nil {
		return m.Permissions
	}
	return nil
}

type ManagementPermissionsResponse struct {
	Results []*ManagementPermissionResponse `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
}

func (m *ManagementPermissionsResponse) Reset()                    { *m = ManagementPermissionsResponse{} }
func (m *ManagementPermissionsResponse) String() string            { return proto.CompactTextString(m) }
func (*ManagementPermissionsResponse) ProtoMessage()               {}
func (*ManagementPermissionsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *ManagementPermissionsResponse) GetResults() []*ManagementPermissionResponse {
	if m != nil {
		return m.Results
	}
	return nil
}

type AddManagementPermissionReponse struct {
}

func (m *AddManagementPermissionReponse) Reset()                    { *m = AddManagementPermissionReponse{} }
func (m *AddManagementPermissionReponse) String() string            { return proto.CompactTextString(m) }
func (*AddManagementPermissionReponse) ProtoMessage()               {}
func (*AddManagementPermissionReponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

type AddManagementPermissionRequest struct {
	IdentityId []string `protobuf:"bytes,1,rep,name=identity_id,json=identityId" json:"identity_id,omitempty"`
	Permission string   `protobuf:"bytes,2,opt,name=permission" json:"permission,omitempty"`
}

func (m *AddManagementPermissionRequest) Reset()                    { *m = AddManagementPermissionRequest{} }
func (m *AddManagementPermissionRequest) String() string            { return proto.CompactTextString(m) }
func (*AddManagementPermissionRequest) ProtoMessage()               {}
func (*AddManagementPermissionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *AddManagementPermissionRequest) GetIdentityId() []string {
	if m != nil {
		return m.IdentityId
	}
	return nil
}

func (m *AddManagementPermissionRequest) GetPermission() string {
	if m != nil {
		return m.Permission
	}
	return ""
}

type RemoveManagementPermissionReponse struct {
}

func (m *RemoveManagementPermissionReponse) Reset()         { *m = RemoveManagementPermissionReponse{} }
func (m *RemoveManagementPermissionReponse) String() string { return proto.CompactTextString(m) }
func (*RemoveManagementPermissionReponse) ProtoMessage()    {}
func (*RemoveManagementPermissionReponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{21}
}

type RemoveManagementPermissionRequest struct {
	IdentityId []string `protobuf:"bytes,1,rep,name=identity_id,json=identityId" json:"identity_id,omitempty"`
	Permission string   `protobuf:"bytes,2,opt,name=permission" json:"permission,omitempty"`
}

func (m *RemoveManagementPermissionRequest) Reset()         { *m = RemoveManagementPermissionRequest{} }
func (m *RemoveManagementPermissionRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveManagementPermissionRequest) ProtoMessage()    {}
func (*RemoveManagementPermissionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{22}
}

func (m *RemoveManagementPermissionRequest) GetIdentityId() []string {
	if m != nil {
		return m.IdentityId
	}
	return nil
}

func (m *RemoveManagementPermissionRequest) GetPermission() string {
	if m != nil {
		return m.Permission
	}
	return ""
}

type Cookie struct {
	Name     string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value    string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	Domain   string `protobuf:"bytes,3,opt,name=domain" json:"domain,omitempty"`
	Expires  string `protobuf:"bytes,4,opt,name=expires" json:"expires,omitempty"`
	Secure   string `protobuf:"bytes,5,opt,name=secure" json:"secure,omitempty"`
	HttpOnly string `protobuf:"bytes,6,opt,name=http_only,json=httpOnly" json:"http_only,omitempty"`
}

func (m *Cookie) Reset()                    { *m = Cookie{} }
func (m *Cookie) String() string            { return proto.CompactTextString(m) }
func (*Cookie) ProtoMessage()               {}
func (*Cookie) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *Cookie) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Cookie) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *Cookie) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *Cookie) GetExpires() string {
	if m != nil {
		return m.Expires
	}
	return ""
}

func (m *Cookie) GetSecure() string {
	if m != nil {
		return m.Secure
	}
	return ""
}

func (m *Cookie) GetHttpOnly() string {
	if m != nil {
		return m.HttpOnly
	}
	return ""
}

type CreateUserAccountRequest struct {
	EmailAddress        string `protobuf:"bytes,1,opt,name=email_address,json=emailAddress" json:"email_address,omitempty"`
	IssueTemporaryToken bool   `protobuf:"varint,2,opt,name=issue_temporary_token,json=issueTemporaryToken" json:"issue_temporary_token,omitempty"`
}

func (m *CreateUserAccountRequest) Reset()                    { *m = CreateUserAccountRequest{} }
func (m *CreateUserAccountRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateUserAccountRequest) ProtoMessage()               {}
func (*CreateUserAccountRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *CreateUserAccountRequest) GetEmailAddress() string {
	if m != nil {
		return m.EmailAddress
	}
	return ""
}

func (m *CreateUserAccountRequest) GetIssueTemporaryToken() bool {
	if m != nil {
		return m.IssueTemporaryToken
	}
	return false
}

type CreateUserAccountResponse struct {
	IdentityId     string  `protobuf:"bytes,1,opt,name=identity_id,json=identityId" json:"identity_id,omitempty"`
	TemporaryToken *Cookie `protobuf:"bytes,2,opt,name=temporary_token,json=temporaryToken" json:"temporary_token,omitempty"`
}

func (m *CreateUserAccountResponse) Reset()                    { *m = CreateUserAccountResponse{} }
func (m *CreateUserAccountResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateUserAccountResponse) ProtoMessage()               {}
func (*CreateUserAccountResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *CreateUserAccountResponse) GetIdentityId() string {
	if m != nil {
		return m.IdentityId
	}
	return ""
}

func (m *CreateUserAccountResponse) GetTemporaryToken() *Cookie {
	if m != nil {
		return m.TemporaryToken
	}
	return nil
}

func init() {
	proto.RegisterType((*ServiceRegistrationResponse)(nil), "fident.ServiceRegistrationResponse")
	proto.RegisterType((*ServiceRegistrationRequest)(nil), "fident.ServiceRegistrationRequest")
	proto.RegisterType((*AuthResponse)(nil), "fident.AuthResponse")
	proto.RegisterType((*AuthChallengeResponse)(nil), "fident.AuthChallengeResponse")
	proto.RegisterType((*AuthChallengeRequest)(nil), "fident.AuthChallengeRequest")
	proto.RegisterType((*PerformAuthRequest)(nil), "fident.PerformAuthRequest")
	proto.RegisterType((*AuthKeyRequest)(nil), "fident.AuthKeyRequest")
	proto.RegisterType((*AuthKeyResponse)(nil), "fident.AuthKeyResponse")
	proto.RegisterType((*LoginTimestampResponse)(nil), "fident.LoginTimestampResponse")
	proto.RegisterType((*LoginTimestampRequest)(nil), "fident.LoginTimestampRequest")
	proto.RegisterType((*IdentityIDsResponse)(nil), "fident.IdentityIDsResponse")
	proto.RegisterType((*IdentityIDsRequest)(nil), "fident.IdentityIDsRequest")
	proto.RegisterType((*AccountAttribute)(nil), "fident.AccountAttribute")
	proto.RegisterType((*AccountDetail)(nil), "fident.AccountDetail")
	proto.RegisterType((*AccountDetailResponse)(nil), "fident.AccountDetailResponse")
	proto.RegisterType((*AccountDetailRequest)(nil), "fident.AccountDetailRequest")
	proto.RegisterType((*GetManagementPermissionsRequest)(nil), "fident.GetManagementPermissionsRequest")
	proto.RegisterType((*ManagementPermissionResponse)(nil), "fident.ManagementPermissionResponse")
	proto.RegisterType((*ManagementPermissionsResponse)(nil), "fident.ManagementPermissionsResponse")
	proto.RegisterType((*AddManagementPermissionReponse)(nil), "fident.AddManagementPermissionReponse")
	proto.RegisterType((*AddManagementPermissionRequest)(nil), "fident.AddManagementPermissionRequest")
	proto.RegisterType((*RemoveManagementPermissionReponse)(nil), "fident.RemoveManagementPermissionReponse")
	proto.RegisterType((*RemoveManagementPermissionRequest)(nil), "fident.RemoveManagementPermissionRequest")
	proto.RegisterType((*Cookie)(nil), "fident.Cookie")
	proto.RegisterType((*CreateUserAccountRequest)(nil), "fident.CreateUserAccountRequest")
	proto.RegisterType((*CreateUserAccountResponse)(nil), "fident.CreateUserAccountResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Auth service

type AuthClient interface {
	// Pre-authentication methods
	GetAuthenticationChallenge(ctx context.Context, in *AuthChallengeRequest, opts ...grpc.CallOption) (*AuthChallengeResponse, error)
	PerformAuthentication(ctx context.Context, in *PerformAuthRequest, opts ...grpc.CallOption) (*AuthResponse, error)
	// Account generation / management
	GetNewAuthenticationKey(ctx context.Context, in *AuthKeyRequest, opts ...grpc.CallOption) (*AuthKeyResponse, error)
	CreateServiceAccount(ctx context.Context, in *ServiceRegistrationRequest, opts ...grpc.CallOption) (*ServiceRegistrationResponse, error)
	CreateUserAccount(ctx context.Context, in *CreateUserAccountRequest, opts ...grpc.CallOption) (*CreateUserAccountResponse, error)
	// Identity queries
	GetLastLoginTimestamps(ctx context.Context, in *LoginTimestampRequest, opts ...grpc.CallOption) (*LoginTimestampResponse, error)
	GetAccountDetails(ctx context.Context, in *AccountDetailRequest, opts ...grpc.CallOption) (*AccountDetailResponse, error)
	GetAllIdentityIDs(ctx context.Context, in *IdentityIDsRequest, opts ...grpc.CallOption) (*IdentityIDsResponse, error)
	// Management API permission management
	GetManagementPermissionsForIdentityIDs(ctx context.Context, in *GetManagementPermissionsRequest, opts ...grpc.CallOption) (*ManagementPermissionsResponse, error)
	AddManagementPermissionToIdentityIDs(ctx context.Context, in *AddManagementPermissionRequest, opts ...grpc.CallOption) (*AddManagementPermissionReponse, error)
	RemoveManagementPermissionFromIdentityIDs(ctx context.Context, in *RemoveManagementPermissionRequest, opts ...grpc.CallOption) (*RemoveManagementPermissionReponse, error)
}

type authClient struct {
	cc *grpc.ClientConn
}

func NewAuthClient(cc *grpc.ClientConn) AuthClient {
	return &authClient{cc}
}

func (c *authClient) GetAuthenticationChallenge(ctx context.Context, in *AuthChallengeRequest, opts ...grpc.CallOption) (*AuthChallengeResponse, error) {
	out := new(AuthChallengeResponse)
	err := grpc.Invoke(ctx, "/fident.Auth/GetAuthenticationChallenge", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) PerformAuthentication(ctx context.Context, in *PerformAuthRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := grpc.Invoke(ctx, "/fident.Auth/PerformAuthentication", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) GetNewAuthenticationKey(ctx context.Context, in *AuthKeyRequest, opts ...grpc.CallOption) (*AuthKeyResponse, error) {
	out := new(AuthKeyResponse)
	err := grpc.Invoke(ctx, "/fident.Auth/GetNewAuthenticationKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) CreateServiceAccount(ctx context.Context, in *ServiceRegistrationRequest, opts ...grpc.CallOption) (*ServiceRegistrationResponse, error) {
	out := new(ServiceRegistrationResponse)
	err := grpc.Invoke(ctx, "/fident.Auth/CreateServiceAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) CreateUserAccount(ctx context.Context, in *CreateUserAccountRequest, opts ...grpc.CallOption) (*CreateUserAccountResponse, error) {
	out := new(CreateUserAccountResponse)
	err := grpc.Invoke(ctx, "/fident.Auth/CreateUserAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) GetLastLoginTimestamps(ctx context.Context, in *LoginTimestampRequest, opts ...grpc.CallOption) (*LoginTimestampResponse, error) {
	out := new(LoginTimestampResponse)
	err := grpc.Invoke(ctx, "/fident.Auth/GetLastLoginTimestamps", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) GetAccountDetails(ctx context.Context, in *AccountDetailRequest, opts ...grpc.CallOption) (*AccountDetailResponse, error) {
	out := new(AccountDetailResponse)
	err := grpc.Invoke(ctx, "/fident.Auth/GetAccountDetails", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) GetAllIdentityIDs(ctx context.Context, in *IdentityIDsRequest, opts ...grpc.CallOption) (*IdentityIDsResponse, error) {
	out := new(IdentityIDsResponse)
	err := grpc.Invoke(ctx, "/fident.Auth/GetAllIdentityIDs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) GetManagementPermissionsForIdentityIDs(ctx context.Context, in *GetManagementPermissionsRequest, opts ...grpc.CallOption) (*ManagementPermissionsResponse, error) {
	out := new(ManagementPermissionsResponse)
	err := grpc.Invoke(ctx, "/fident.Auth/GetManagementPermissionsForIdentityIDs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) AddManagementPermissionToIdentityIDs(ctx context.Context, in *AddManagementPermissionRequest, opts ...grpc.CallOption) (*AddManagementPermissionReponse, error) {
	out := new(AddManagementPermissionReponse)
	err := grpc.Invoke(ctx, "/fident.Auth/AddManagementPermissionToIdentityIDs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) RemoveManagementPermissionFromIdentityIDs(ctx context.Context, in *RemoveManagementPermissionRequest, opts ...grpc.CallOption) (*RemoveManagementPermissionReponse, error) {
	out := new(RemoveManagementPermissionReponse)
	err := grpc.Invoke(ctx, "/fident.Auth/RemoveManagementPermissionFromIdentityIDs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Auth service

type AuthServer interface {
	// Pre-authentication methods
	GetAuthenticationChallenge(context.Context, *AuthChallengeRequest) (*AuthChallengeResponse, error)
	PerformAuthentication(context.Context, *PerformAuthRequest) (*AuthResponse, error)
	// Account generation / management
	GetNewAuthenticationKey(context.Context, *AuthKeyRequest) (*AuthKeyResponse, error)
	CreateServiceAccount(context.Context, *ServiceRegistrationRequest) (*ServiceRegistrationResponse, error)
	CreateUserAccount(context.Context, *CreateUserAccountRequest) (*CreateUserAccountResponse, error)
	// Identity queries
	GetLastLoginTimestamps(context.Context, *LoginTimestampRequest) (*LoginTimestampResponse, error)
	GetAccountDetails(context.Context, *AccountDetailRequest) (*AccountDetailResponse, error)
	GetAllIdentityIDs(context.Context, *IdentityIDsRequest) (*IdentityIDsResponse, error)
	// Management API permission management
	GetManagementPermissionsForIdentityIDs(context.Context, *GetManagementPermissionsRequest) (*ManagementPermissionsResponse, error)
	AddManagementPermissionToIdentityIDs(context.Context, *AddManagementPermissionRequest) (*AddManagementPermissionReponse, error)
	RemoveManagementPermissionFromIdentityIDs(context.Context, *RemoveManagementPermissionRequest) (*RemoveManagementPermissionReponse, error)
}

func RegisterAuthServer(s *grpc.Server, srv AuthServer) {
	s.RegisterService(&_Auth_serviceDesc, srv)
}

func _Auth_GetAuthenticationChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).GetAuthenticationChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fident.Auth/GetAuthenticationChallenge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).GetAuthenticationChallenge(ctx, req.(*AuthChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_PerformAuthentication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PerformAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).PerformAuthentication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fident.Auth/PerformAuthentication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).PerformAuthentication(ctx, req.(*PerformAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_GetNewAuthenticationKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).GetNewAuthenticationKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fident.Auth/GetNewAuthenticationKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).GetNewAuthenticationKey(ctx, req.(*AuthKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_CreateServiceAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).CreateServiceAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fident.Auth/CreateServiceAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).CreateServiceAccount(ctx, req.(*ServiceRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_CreateUserAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).CreateUserAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fident.Auth/CreateUserAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).CreateUserAccount(ctx, req.(*CreateUserAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_GetLastLoginTimestamps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginTimestampRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).GetLastLoginTimestamps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fident.Auth/GetLastLoginTimestamps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).GetLastLoginTimestamps(ctx, req.(*LoginTimestampRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_GetAccountDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).GetAccountDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fident.Auth/GetAccountDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).GetAccountDetails(ctx, req.(*AccountDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_GetAllIdentityIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdentityIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).GetAllIdentityIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fident.Auth/GetAllIdentityIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).GetAllIdentityIDs(ctx, req.(*IdentityIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_GetManagementPermissionsForIdentityIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetManagementPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).GetManagementPermissionsForIdentityIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fident.Auth/GetManagementPermissionsForIdentityIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).GetManagementPermissionsForIdentityIDs(ctx, req.(*GetManagementPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_AddManagementPermissionToIdentityIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddManagementPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).AddManagementPermissionToIdentityIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fident.Auth/AddManagementPermissionToIdentityIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).AddManagementPermissionToIdentityIDs(ctx, req.(*AddManagementPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_RemoveManagementPermissionFromIdentityIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveManagementPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).RemoveManagementPermissionFromIdentityIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fident.Auth/RemoveManagementPermissionFromIdentityIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).RemoveManagementPermissionFromIdentityIDs(ctx, req.(*RemoveManagementPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Auth_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fident.Auth",
	HandlerType: (*AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAuthenticationChallenge",
			Handler:    _Auth_GetAuthenticationChallenge_Handler,
		},
		{
			MethodName: "PerformAuthentication",
			Handler:    _Auth_PerformAuthentication_Handler,
		},
		{
			MethodName: "GetNewAuthenticationKey",
			Handler:    _Auth_GetNewAuthenticationKey_Handler,
		},
		{
			MethodName: "CreateServiceAccount",
			Handler:    _Auth_CreateServiceAccount_Handler,
		},
		{
			MethodName: "CreateUserAccount",
			Handler:    _Auth_CreateUserAccount_Handler,
		},
		{
			MethodName: "GetLastLoginTimestamps",
			Handler:    _Auth_GetLastLoginTimestamps_Handler,
		},
		{
			MethodName: "GetAccountDetails",
			Handler:    _Auth_GetAccountDetails_Handler,
		},
		{
			MethodName: "GetAllIdentityIDs",
			Handler:    _Auth_GetAllIdentityIDs_Handler,
		},
		{
			MethodName: "GetManagementPermissionsForIdentityIDs",
			Handler:    _Auth_GetManagementPermissionsForIdentityIDs_Handler,
		},
		{
			MethodName: "AddManagementPermissionToIdentityIDs",
			Handler:    _Auth_AddManagementPermissionToIdentityIDs_Handler,
		},
		{
			MethodName: "RemoveManagementPermissionFromIdentityIDs",
			Handler:    _Auth_RemoveManagementPermissionFromIdentityIDs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fident.proto",
}

func init() { proto.RegisterFile("fident.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1126 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x57, 0xdf, 0x4f, 0xdc, 0xc6,
	0x13, 0xe7, 0x38, 0x42, 0x60, 0x38, 0x08, 0x6c, 0xee, 0x88, 0xbf, 0xe6, 0x47, 0xc0, 0x90, 0x7c,
	0x13, 0x45, 0xa5, 0x12, 0x55, 0x1b, 0xc4, 0x43, 0x25, 0x0a, 0x84, 0x20, 0x28, 0x8d, 0x5c, 0x1a,
	0xa9, 0xed, 0x83, 0xb5, 0x39, 0x4f, 0xc0, 0xe5, 0xec, 0x75, 0x77, 0xd7, 0x24, 0xd7, 0xd7, 0x3e,
	0x56, 0xea, 0x7b, 0xd5, 0x97, 0xaa, 0x7f, 0x45, 0xff, 0xbc, 0xca, 0xde, 0x5d, 0x9f, 0xcf, 0xf8,
	0x7e, 0x3c, 0xf4, 0xed, 0x66, 0xf6, 0x33, 0xf3, 0x99, 0x99, 0x1d, 0xcf, 0xec, 0x41, 0xe3, 0x7d,
	0xe0, 0x63, 0x24, 0x77, 0x62, 0xce, 0x24, 0x23, 0xd3, 0x4a, 0x72, 0x3c, 0x58, 0xf9, 0x16, 0xf9,
	0x6d, 0xd0, 0x46, 0x17, 0xaf, 0x02, 0x21, 0x39, 0x95, 0x01, 0x8b, 0x5c, 0x14, 0x31, 0x8b, 0x04,
	0x92, 0xc7, 0x30, 0x97, 0xe1, 0x02, 0xd9, 0xf5, 0x02, 0xdf, 0xaa, 0x6d, 0xd4, 0x9e, 0xcd, 0xba,
	0x60, 0x54, 0xa7, 0x7e, 0x0a, 0x10, 0xca, 0xde, 0xbb, 0xc1, 0xae, 0x35, 0xa9, 0x00, 0x5a, 0x75,
	0x86, 0x5d, 0xe7, 0xb7, 0x1a, 0xd8, 0x95, 0x0c, 0x3f, 0x27, 0x28, 0x24, 0xd9, 0x84, 0x86, 0xb1,
	0x8f, 0x68, 0x88, 0x9a, 0xc1, 0xf8, 0xbc, 0xa0, 0x21, 0x92, 0x27, 0xb0, 0x60, 0x20, 0xb7, 0x18,
	0xf9, 0x8c, 0x6b, 0x96, 0x79, 0xad, 0x7d, 0x9b, 0x29, 0xc9, 0x16, 0xcc, 0x8b, 0x24, 0x8e, 0x19,
	0x97, 0x1e, 0x86, 0x34, 0xe8, 0x58, 0xf5, 0x0c, 0xd5, 0xd0, 0xca, 0xe3, 0x54, 0xe7, 0x6c, 0x43,
	0xe3, 0x20, 0x91, 0xd7, 0x79, 0x7e, 0x4d, 0xb8, 0x27, 0xd9, 0x0d, 0x46, 0x9a, 0x57, 0x09, 0xce,
	0xe7, 0xd0, 0x4a, 0x51, 0x87, 0xd7, 0xb4, 0xd3, 0xc1, 0xe8, 0x0a, 0x73, 0xf8, 0x2a, 0xcc, 0xb6,
	0x8d, 0x52, 0x9b, 0xf4, 0x14, 0xce, 0x5b, 0x68, 0x96, 0xcc, 0x54, 0x8e, 0x23, 0x8b, 0xb8, 0x06,
	0x10, 0x73, 0xf6, 0x13, 0xb6, 0x65, 0x7a, 0xae, 0xb2, 0x9b, 0xd5, 0x9a, 0x53, 0xdf, 0xf9, 0xbb,
	0x06, 0xe4, 0x0d, 0xf2, 0xf7, 0x8c, 0x87, 0x2a, 0xf8, 0xf1, 0xdd, 0xde, 0x60, 0xd7, 0xbb, 0xa6,
	0x91, 0xdf, 0x41, 0xe3, 0xf6, 0x06, 0xbb, 0xaf, 0x33, 0x45, 0x89, 0xb5, 0x5e, 0x62, 0x25, 0x9f,
	0x00, 0xc9, 0x53, 0xf3, 0xb8, 0xae, 0x80, 0x35, 0x95, 0xc1, 0x96, 0xda, 0xe5, 0xd2, 0x38, 0x09,
	0x2c, 0xa4, 0xc1, 0x9d, 0x61, 0xd7, 0xc4, 0x67, 0xc3, 0x4c, 0x22, 0x90, 0x17, 0xae, 0x35, 0x97,
	0xd3, 0xb3, 0x98, 0x0a, 0xf1, 0x81, 0x71, 0x93, 0x6f, 0x2e, 0x93, 0x17, 0xb0, 0x94, 0x08, 0x7a,
	0x85, 0x9e, 0x8f, 0xa2, 0xcd, 0x83, 0x38, 0x6d, 0x17, 0x1d, 0xde, 0x62, 0x76, 0x70, 0xd4, 0xd3,
	0x3b, 0xbf, 0xd7, 0xe0, 0x41, 0xce, 0xab, 0x6f, 0x69, 0x18, 0x71, 0xa9, 0x68, 0x93, 0x55, 0x0d,
	0x1d, 0xf3, 0xe0, 0x96, 0x4a, 0xd5, 0xd0, 0x8a, 0x17, 0xb4, 0xea, 0x0c, 0xbb, 0xa5, 0xaa, 0x4e,
	0x95, 0xaa, 0xea, 0xfc, 0x59, 0x83, 0xe5, 0x73, 0x76, 0x15, 0x44, 0x97, 0x41, 0x88, 0x42, 0xd2,
	0x30, 0xce, 0xe3, 0x3a, 0x86, 0xfb, 0x1c, 0x45, 0xd2, 0x91, 0xc2, 0xaa, 0x6d, 0xd4, 0x9f, 0xcd,
	0xed, 0xbe, 0xd8, 0xd1, 0xdf, 0x64, 0xb5, 0xc1, 0x8e, 0xab, 0xd0, 0xc7, 0x91, 0xe4, 0x5d, 0xd7,
	0xd8, 0xda, 0xfb, 0xd0, 0x28, 0x1e, 0x90, 0x45, 0xa8, 0xa7, 0x91, 0xaa, 0x4c, 0xd3, 0x9f, 0x69,
	0x57, 0xdf, 0xd2, 0x4e, 0xa2, 0xee, 0xbc, 0xee, 0x2a, 0x61, 0x7f, 0x72, 0xaf, 0xe6, 0xec, 0x41,
	0xab, 0xcc, 0x35, 0xa0, 0x99, 0xea, 0xfd, 0x75, 0x71, 0xbe, 0x80, 0x87, 0xa7, 0x46, 0x3a, 0x12,
	0x83, 0x07, 0x44, 0xd9, 0xae, 0x09, 0xa4, 0xcf, 0x2e, 0xa3, 0x73, 0xf6, 0x61, 0xf1, 0xa0, 0xdd,
	0x66, 0x49, 0x24, 0x0f, 0xa4, 0xe4, 0xc1, 0xbb, 0x44, 0xe2, 0xa8, 0x3c, 0x66, 0x75, 0x1e, 0xce,
	0x5f, 0x35, 0x98, 0xd7, 0xc6, 0x47, 0x28, 0x69, 0xd0, 0x19, 0xfd, 0x25, 0x14, 0x3b, 0x62, 0xb2,
	0xd4, 0x11, 0x7b, 0x00, 0xd4, 0xc4, 0x20, 0xac, 0x7a, 0x76, 0x31, 0x96, 0xb9, 0x98, 0x72, 0x90,
	0x6e, 0x01, 0x4b, 0x2c, 0xb8, 0xdf, 0xe6, 0x48, 0x25, 0xfa, 0x59, 0x1b, 0xd4, 0x5d, 0x23, 0x3a,
	0xaf, 0xa1, 0xd5, 0x17, 0x61, 0x5e, 0xae, 0x4f, 0xcb, 0x2d, 0xd0, 0x2a, 0x31, 0x69, 0xbc, 0x41,
	0x39, 0x2f, 0xa1, 0x59, 0xf2, 0x34, 0xe6, 0x7d, 0x7d, 0x05, 0x8f, 0x4f, 0x50, 0x7e, 0x4d, 0x23,
	0x7a, 0x85, 0x21, 0x46, 0xf2, 0x0d, 0xf2, 0x30, 0x10, 0x22, 0x60, 0x91, 0x18, 0xdb, 0x07, 0x85,
	0xd5, 0x2a, 0x07, 0xe3, 0x6f, 0x87, 0x0d, 0x98, 0x8b, 0x7b, 0xbc, 0xd6, 0x64, 0xc6, 0x50, 0x54,
	0x39, 0x1e, 0xac, 0x0d, 0x88, 0x51, 0x73, 0x7c, 0x59, 0xae, 0xd8, 0xb6, 0xa9, 0xd8, 0xb0, 0xd0,
	0x7a, 0x05, 0xdc, 0x80, 0xf5, 0x03, 0xdf, 0xaf, 0xc6, 0xaa, 0xc9, 0x45, 0x87, 0x20, 0xc6, 0x2b,
	0x14, 0x59, 0x07, 0xe8, 0x25, 0x65, 0x86, 0x4a, 0x4f, 0xe3, 0x6c, 0xc1, 0xa6, 0x8b, 0x21, 0xbb,
	0xc5, 0x61, 0x71, 0xf8, 0xc3, 0x41, 0xff, 0x51, 0x28, 0x7f, 0xd4, 0x60, 0xfa, 0x90, 0xb1, 0x9b,
	0x00, 0x09, 0x81, 0xa9, 0xc2, 0x8c, 0xcc, 0x7e, 0x57, 0x7f, 0x72, 0x64, 0x19, 0xa6, 0x7d, 0x16,
	0xd2, 0xc0, 0xcc, 0x61, 0x2d, 0xa5, 0x5f, 0x00, 0x7e, 0x8c, 0x03, 0x8e, 0x42, 0x0f, 0x42, 0x23,
	0xa6, 0x16, 0x02, 0xdb, 0x09, 0x47, 0xeb, 0x9e, 0xb2, 0x50, 0x12, 0x59, 0x81, 0xd9, 0x6b, 0x29,
	0x63, 0x8f, 0x45, 0x9d, 0xae, 0x35, 0xad, 0x3e, 0xc5, 0x54, 0xf1, 0x4d, 0xd4, 0xe9, 0x3a, 0x02,
	0xac, 0xc3, 0xec, 0x0b, 0xfa, 0x4e, 0x20, 0xd7, 0x6d, 0x6f, 0x12, 0xdf, 0x82, 0xf9, 0x6c, 0xad,
	0x7b, 0xd4, 0xf7, 0x39, 0x0a, 0xa1, 0xa3, 0x6e, 0x64, 0xca, 0x03, 0xa5, 0x23, 0xbb, 0xd0, 0x0a,
	0x84, 0x48, 0xd0, 0x93, 0x18, 0xc6, 0x8c, 0x53, 0xde, 0xf5, 0xd4, 0x7a, 0x4f, 0xb3, 0x99, 0x71,
	0x1f, 0x66, 0x87, 0x97, 0xe6, 0xec, 0x32, 0x5b, 0xf6, 0x09, 0xfc, 0xaf, 0x82, 0x74, 0xdc, 0x0e,
	0x7f, 0x09, 0x0f, 0xaa, 0xb8, 0xe6, 0x76, 0x17, 0x4c, 0x9b, 0xaa, 0x62, 0xbb, 0x0b, 0xb2, 0x8f,
	0x76, 0xf7, 0x9f, 0x19, 0x98, 0x4a, 0x17, 0x17, 0xf9, 0x11, 0xec, 0x13, 0x94, 0xe9, 0xcf, 0xd4,
	0x69, 0x3b, 0x7b, 0x1d, 0xe5, 0x4f, 0x08, 0xb2, 0x9a, 0xcf, 0x87, 0x8a, 0x97, 0x85, 0xbd, 0x36,
	0xe0, 0x54, 0xef, 0xe4, 0x09, 0x72, 0x06, 0xad, 0xc2, 0xcb, 0xa1, 0x47, 0x40, 0x6c, 0x63, 0x79,
	0xf7, 0x61, 0x61, 0x37, 0x8b, 0x5e, 0x0b, 0xce, 0xce, 0xe1, 0xd1, 0x09, 0xca, 0x0b, 0xfc, 0xd0,
	0xef, 0x2b, 0x5d, 0x8a, 0xcb, 0x45, 0x93, 0xde, 0x1b, 0xc0, 0x7e, 0x74, 0x47, 0x9f, 0x7b, 0xa3,
	0xd0, 0x54, 0x75, 0xd7, 0xaf, 0x43, 0x5d, 0x7a, 0xe2, 0x18, 0x93, 0xc1, 0xaf, 0x46, 0x7b, 0x6b,
	0x28, 0x26, 0xa7, 0xf8, 0x01, 0x96, 0xee, 0x5c, 0x2d, 0xd9, 0xc8, 0x2f, 0x66, 0x40, 0xab, 0xd9,
	0x9b, 0x43, 0x10, 0xb9, 0xef, 0xef, 0x61, 0xf9, 0x04, 0xe5, 0x39, 0x15, 0xb2, 0x7f, 0xa1, 0x0a,
	0xb2, 0x36, 0x68, 0xab, 0x2b, 0xef, 0xeb, 0xc3, 0x97, 0xbe, 0x33, 0x41, 0x5c, 0x58, 0x4a, 0x3b,
	0xa2, 0x38, 0xf6, 0x45, 0xa1, 0x11, 0x2a, 0xd6, 0x41, 0xa1, 0x11, 0xaa, 0xd6, 0x8e, 0x33, 0x41,
	0x2e, 0x94, 0xcf, 0x4e, 0xa7, 0xb0, 0x8c, 0x7b, 0x4d, 0x70, 0x77, 0x43, 0xdb, 0x2b, 0x95, 0x67,
	0xb9, 0xbf, 0x5f, 0xe0, 0xe9, 0xa0, 0xf5, 0xf2, 0x8a, 0xf1, 0x22, 0xc9, 0xff, 0x8d, 0xa3, 0x11,
	0xeb, 0xc8, 0x7e, 0x32, 0x6c, 0xb0, 0x17, 0xb9, 0x3f, 0xc2, 0xf6, 0x80, 0x81, 0x7d, 0xc9, 0x8a,
	0xcc, 0x4f, 0xf3, 0xa2, 0x0c, 0x1d, 0xef, 0xf6, 0x68, 0x9c, 0x61, 0xfe, 0xb5, 0x06, 0xcf, 0x07,
	0xcf, 0xe8, 0x57, 0x9c, 0x85, 0x45, 0xfe, 0xe7, 0xc6, 0xef, 0xc8, 0xb1, 0x6e, 0x8f, 0x05, 0xd5,
	0x51, 0xbc, 0x9b, 0xce, 0xfe, 0xc2, 0x7d, 0xf6, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x3e, 0x81,
	0x06, 0xdf, 0xd2, 0x0d, 0x00, 0x00,
}
